import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
%matplotlib inline

# Reading data from remote link

url = "http://bit.ly/w-data"
ds = pd.read_csv(url)
print("Data imported successfully")

ds.head(25)

ds.head ()

ds.tail()

# to find the no. of rows & columns
ds.shape 

#to find the information about the dataset
ds.info()

ds.describe()

# To check the null or missing values if any.
ds.isnull().sum()

# Plotting the distribution of scores
plt.rcParams['figure.figsize']= [10,5]
ds.plot(x='Hours', y='Scores', style='*', color='red',markersize=10)  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Scored')  
plt.grid()
plt.show()

# Spliting the data using iloc function.
X = ds.iloc[:, :1].values  
y = ds.iloc[:, 1:].values  
X
y

#spliting the data into training and testing data
from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                            test_size=0.2, random_state=0) 
                            


from sklearn.linear_model import LinearRegression  

model = LinearRegression()  
model.fit(X_train, y_train) 

print("Training complete.")

# Plotting the regression line
line = model.coef_*X+model.intercept_

# Plotting for the test data
plt.rcParams['figure.figsize'] = [10,5]
plt.scatter(X, y, color='purple')
plt.plot(X, line, color= 'green' );
plt.xlabel=('Percentage scored')
plt.ylabel=('hours studied')
plt.grid()
plt.show()

plt.rcParams['figure.figsize'] = [10,5]
plt.scatter(X_test, y_test, color='purple')
plt.plot(X, line, color= 'green');
plt.xlabel=('Percentage scored')
plt.ylabel=('hours studied')
plt.grid()
plt.show()

print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores

y_pred
y_test

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual':[y_test], 'Predicted': [y_pred]})  
df 

# Predicting our own data as given.
hours = 9.25
own_pred = model.predict([[hours]])
print("No of Hours = {}".format([[hours]]))
print("Predicted Score = {}".format(own_pred[0]))

from sklearn import metrics  
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)) 


                            
           
